package game;

import sprites.CleanHallway;
import sprites.Dirt;
import sprites.Dumpster;
import sprites.Dust;
import sprites.DustBall;
import sprites.Sprite;
import sprites.Vacuum;
import sprites.Wall;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

/**
 * A class that represents the basic functionality of the vacuum game.
 * This class is responsible for performing the following operations:
 * 1. At creation, it initializes the instance variables used to store the
 *        current state of the game.
 * 2. When a move is specified, it checks if it is a legal move and makes the
 *        move if it is legal.
 * 3. It reports information about the current state of the game when asked.
 */
public class VacuumGame {

  private Random random;            // a random number generator to move the DustBalls
  private Grid<Sprite> grid;        // the grid
  private Vacuum vacuum1;           // the first player
  private Vacuum vacuum2;           // the second player
  private List<Dust> dusts;         // the dusts
  private List<DustBall> dustBalls; // the dust balls

  /**
   * Creates a new <code>VacuumGame</code> that corresponds to the given input text file. Assumes
   * that the input file has one or more lines of equal lengths, and that each character in it
   * (other than newline) is a character that represents one of the <code>Sprite</code>s in this
   * game. Uses gridType to implement the grid.
   * @param layoutFileName path to the input grid file
   * @param gridType the type of grid implementation to use
   */
  public VacuumGame(String layoutFileName, Constants.GridType gridType) throws IOException {
    dusts = new ArrayList<>();
    dustBalls = new ArrayList<>();
    random = new Random();

    // open the file, read the contents, and determine dimensions of the grid
    int[] dimensions = getDimensions(layoutFileName);
    int numRows = dimensions[0];
    int numColumns = dimensions[1];
        
    if (gridType.equals(Constants.GridType.LIST_GRID)) {
      grid = new ListGrid<>(numRows, numColumns);
    } else {
      grid = new MapGrid<>(numRows, numColumns);
    }

    // open the file again, read the contents, and store them in grid
    Scanner sc = new Scanner(new File(layoutFileName));
    for (int row = 0; row < numRows; row++) {
      String nextLine = sc.nextLine();

      /******** 
       * Initialize the grid
       ********/
      // Call helper function
      setgrid(nextLine, row);
      
    }
    sc.close();
  }


	/*********
     * Lots of methods
     ************/
  private void setgrid(String nextLine, int row) {
				
	}
  
  public void dustBallMove(){
	  if ((vacuum1.getUnder().getSymbol() | vacuum2.getUnder().getSymbol())!= Constants.DUST_BALL){
		  for (int i = 0; i<dustBalls.size(); i++){
			  int row = random.nextInt(getNumRows());
			  int column = random.nextInt(getNumColumns());
			  
			  if (grid.GetCell(row, column).getSymbol() == Constants.CLEAN){
				  grid.SetCell(row, column, dustBalls.get(i));
			  }
			  else if (grid.GetCell(row, column).getSymbol() == Constants.DUST){
				  grid.SetCell(row, column, dustBalls.get(i));
			  }		  
		  }
	  }
  }
  
  public int getNumRows(){
	  return grid.getNumRows();
  }
  
  public int getNumColumns(){
	  return grid.getNumColumns();
  }
  
  public Sprite getSprite(int row, int column){
	  return grid.GetCell(row, column);
  }
  
  public Grid<Sprite> getGrid(){
	  return grid;
  }
  
  public Vacuum getVacuumOne(){
	  return vacuum1;
  }
  
  public Vacuum getVacuumTwo(){
	  return vacuum2;
  }
  
  public void move(char nextMove){
	  if (nextMove == Constants.P1_LEFT){
		  if (grid.GetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.LEFT).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.LEFT).getSymbol() != Constants.P2 ){
				  if(grid.GetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.LEFT).getSymbol() == Constants.DUMPSTER{
					  vacuum1.empty();
				  }
				  else{
					  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn(), chartoSprite(Constants.CLEAN,vacuum1.getRow(),vacuum1.getColumn()));
					  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.LEFT, chartoSprite(Constants.P1,vacuum1.getRow(),vacuum1.getColumn()));
					  dustBallMove();
				  }  
			  }
		  }
	  }
	  else if (nextMove == Constants.P1_RIGHT){
		  if (grid.GetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.RIGHT).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.RIGHT).getSymbol() != Constants.P2 ){
				  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn(), chartoSprite(Constants.CLEAN,vacuum1.getRow(),vacuum1.getColumn()));
				  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn()+Constants.RIGHT, chartoSprite(Constants.P1,vacuum1.getRow(),vacuum1.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P1_DOWN){
		  if (grid.GetCell(vacuum1.getRow()-Constants.DOWN, vacuum1.getColumn()).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum1.getRow()-Constants.DOWN, vacuum1.getColumn()).getSymbol() != Constants.P2 ){
				  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn(), chartoSprite(Constants.CLEAN,vacuum1.getRow(),vacuum1.getColumn()));
				  grid.SetCell(vacuum1.getRow()-Constants.DOWN, vacuum1.getColumn(), chartoSprite(Constants.P1,vacuum1.getRow(),vacuum1.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P1_UP){
		  if (grid.GetCell(vacuum1.getRow()-Constants.UP, vacuum1.getColumn()).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum1.getRow()-Constants.UP, vacuum1.getColumn()).getSymbol() != Constants.P2 ){
				  grid.SetCell(vacuum1.getRow(), vacuum1.getColumn(), chartoSprite(Constants.CLEAN,vacuum1.getRow(),vacuum1.getColumn()));
				  grid.SetCell(vacuum1.getRow()-Constants.UP, vacuum1.getColumn(), chartoSprite(Constants.P1,vacuum1.getRow(),vacuum1.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P2_LEFT){
		  if (grid.GetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.LEFT).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.LEFT).getSymbol() != Constants.P1 ){
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn(), chartoSprite(Constants.CLEAN,vacuum2.getRow(),vacuum2.getColumn()));
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.LEFT, chartoSprite(Constants.P2,vacuum2.getRow(),vacuum2.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P2_RIGHT){
		  if (grid.GetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.RIGHT).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.RIGHT).getSymbol() != Constants.P1 ){
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn(), chartoSprite(Constants.CLEAN,vacuum2.getRow(),vacuum2.getColumn()));
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn()+Constants.RIGHT, chartoSprite(Constants.P2,vacuum2.getRow(),vacuum2.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P2_DOWN){
		  if (grid.GetCell(vacuum2.getRow()-Constants.DOWN, vacuum2.getColumn()).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum2.getRow()-Constants.DOWN, vacuum2.getColumn()).getSymbol() != Constants.P1 ){
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn(), chartoSprite(Constants.CLEAN,vacuum2.getRow(),vacuum2.getColumn()));
				  grid.SetCell(vacuum2.getRow()-Constants.DOWN, vacuum2.getColumn(), chartoSprite(Constants.P2,vacuum2.getRow(),vacuum2.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  else if (nextMove == Constants.P2_UP){
		  if (grid.GetCell(vacuum2.getRow()-Constants.UP, vacuum2.getColumn()).getSymbol() != Constants.WALL ){
			  if (grid.GetCell(vacuum2.getRow()-Constants.UP, vacuum2.getColumn()).getSymbol() != Constants.P1 ){
				  grid.SetCell(vacuum2.getRow(), vacuum2.getColumn(), chartoSprite(Constants.CLEAN,vacuum2.getRow(),vacuum2.getColumn()));
				  grid.SetCell(vacuum2.getRow()-Constants.UP, vacuum2.getColumn(), chartoSprite(Constants.P2,vacuum2.getRow(),vacuum2.getColumn()));
				  dustBallMove();
			  }
		  }
	  }
	  
  }
  
  public boolean gameOver(){
	  boolean gamefinished = false;
	if (dusts.isEmpty() && dustBalls.isEmpty()){
		gamefinished = true;
	}
	return gamefinished;
  }
  
  public char getWinner(){
	  char winner;
	  if (vacuum1.getScore() > vacuum2.getScore()){
		  winner = Constants.P1;
	  }
	  else if (vacuum2.getScore() > vacuum1.getScore()){
		  winner = Constants.P2;
	  }
	  else{
		  winner = Constants.TIE;
	  }
	  return winner;
  }
  
  private Sprite chartoSprite(char symbol, int row, int column){
	  Sprite spr;
	  if (symbol == Constants.WALL){
		  spr = new Wall(row, column);		  
	  }
	  else if (symbol == Constants.CLEAN){
		  spr = new CleanHallway(row, column);		  
	  }
	  else if (symbol == Constants.P1 | symbol == Constants.P2){
		  spr = new Vacuum(symbol, row, column, Constants.CAPACITY);		  
	  }
	  else if (symbol == Constants.DUMPSTER){
		  spr = new Dumpster(row, column);		  
	  }
	  else if (symbol == Constants.DUST){
		  spr = new Dust(row, column, Constants.DUST_SCORE);		  
	  }
	  else{
		  spr = new DustBall(row, column, Constants.DUST_BALL_SCORE);		  
	  }
	  return spr;
  }

  /**
   * Returns the dimensions of the grid in the file named layoutFileName.
   * @param layoutFileName path of the input grid file
   * @return an array [numRows, numCols], where numRows is the number
   *     of rows and numCols is the number of columns in the grid that
   *     corresponds to the given input grid file
   * @throws IOException if cannot open file layoutFileName
   */
  private int[] getDimensions(String layoutFileName) throws IOException {       

    Scanner sc = new Scanner(new File(layoutFileName));

    // find the number of columns
    String nextLine = sc.nextLine();
    int numCols = nextLine.length();

    // find the number of rows
    int numRows = 1;
    while (sc.hasNext()) {
      numRows++;
      nextLine = sc.nextLine();
    }

    sc.close();
    return new int[]{numRows, numCols};
  }  
}
